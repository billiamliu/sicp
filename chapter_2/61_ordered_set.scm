(define (element-of-set? x set)
  (cond ((null? set) #f)
        ((= x (car set)) #t)
        ((< x (car set)) #f)
        (else (element-of-set? x (cdr set)))))

(define (intersection set1 set2)
  (if (or (null? set1) (null? set2))
    '()
    (let ((x1 (car set1)) (x2 (car set2)))
      (cond ((= x1 x2)
             (cons x1 (intersection (cdr set1) (cdr set2))))
            ((< x1 x2)
             (intersection (cdr set1) set2))
            ((< x1 x1)
             (intersection (cdr set2) set1))))))

(define (adjoin-set x set)
  (cond ((null? set) (cons x set))
        ((= x (car set)) set)
        ((> x (car set)) (cons (car set) (adjoin-set x (cdr set))))
        ((< x (car set)) (cons x set))
        (else (error "wat"))))

(define (union set1 set2)
  (cond ((null? set1) set2)
        ((null? set2) set1)
        ((= (car set1) (car set2))
         (cons (car set1) (union (cdr set1) (cdr set2))))
        ((< (car set1) (car set2))
         (cons (car set1) (union (cdr set1) set2)))
        ((> (car set1) (car set2))
         (cons (car set2) (union set1 (cdr set2))))
        (else (error "wat"))))


(define my-set (list 1 2 3 7))
(define my-set-2 (list 2 3 5))

(adjoin-set 0 my-set)
(adjoin-set 2 my-set)
(adjoin-set 6 my-set)
(adjoin-set 9 my-set)

(union my-set my-set-2)
(union (list 11 23) my-set)
