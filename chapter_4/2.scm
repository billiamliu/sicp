(define (eval exp env)
  (cond ((self-evaluating? exp) exp)
        ((variable? exp) (lookup-variable-value exp env))
        ((quoted? exp) (text-of-quotation exp))
        ((assignment? exp) (eval-assignment exp env))
        ((definition? exp) (eval-definition exp env))
        ((if? exp) (eval-if exp env))
        ((lambda? exp)
         (make-procedure (lambda-parameters exp)
                         (lambda-body exp)
                         env))
        ((begin? exp)
         (eval-sequence (begin-actions exp) env))
        ((cond? exp) (eval (cond-> if exp) env))
        ((application? exp)
         (apply (eval (operator exp) env)
                (list-of-values (operands exp) env)))
        (else
          (error "Unknown expression type -- EVAL" exp))))

;; reference
(define (application? exp) (pair? exp)) ;; (+ 1 2 3)
(define (assignment? exp) ;; (set! x 3)
  (tagged-list? exp 'set!))
(define (definition? exp) ;; (define x 3)
  (tagged-list? exp 'define))

;; test (define x 3)
(define (louis-eval exp env)
  (cond ((application? exp)
         (apply (eval (operator exp) env)
                (list-of-values (operands exp) env)))
        ((assignment? exp) (eval-assignment exp env))
        ((definition? exp) (eval-definition exp env))))

;; a. because (define x 3) is a pair (define (x (3 . ()))), it's going to try and apply, which calls eval, and end up in a loop
