(define (enclosing-environment env) (cdr env))
(define (first-frame env) (car env))
(define the-empty-environment '())

(define (make-frame variables values) (cons variables values))
(define (frame-variables frame) (car frame))
(define (frame-values frame) (cdr frame))

(define (add-binding-to-frame! var val frame)
  (set-car! frame (cons var (car frame)))
  (set-cdr! frame (cons val (cdr frame))))

(define (extend-environment vars vals base-env)
  (if (= (length vars) (length vals))
    (cons (make-frame vars vals) base-env)
    (if (< (length vars) (length vals))
      (error "Too many arguments supplied -- EXT ENV" vars vals)
      (error "Too few arguments supplied -- EXT ENV" vars vals))))

(define (set-variable-value! var val env)
  (define (env-loop env)
    (define (scan vars vals)
      (cond ((null? vars)
             (env-loop (enclosing-environment env)))
            ((eq? var (car vars))
             (set-car! vals val))
            (else (scan (cdr vars) (cdr vals)))))
    (if (eq? env the-empty-environment)
      (error "Unbound variable -- SET!" var)
      (let ((frame (first-frame env)))
        (scan (frame-variables frame)
              (frame-values frame)))))
  (env-loop env))

(define (make-unbound! var env) 
  (let* ((frame (first-frame env)) 
         (vars (frame-variables frame)) 
         (vals (frame-values frame))) 
    (define (scan pre-vars pre-vals vars vals) 
      (if (not (null? vars)) 
        (if (eq? var (car vars)) 
          (begin (set-cdr! pre-vars (cdr vars)) 
                 (set-cdr! pre-vals (cdr vals))) 
          (scan vars vals (cdr vars) (cdr vals))))) 
    (if (not (null? vars)) 
      (if (eq? var (car vars)) 
        (begin (set-car! frame (cdr vars)) 
               (set-cdr! frame (cdr vals))) 
        (scan vars vals (cdr vars) (cdr vals))))))
